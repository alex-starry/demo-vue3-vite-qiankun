----替换前----
new Vue({
  router,
  store,
  render: h => h(app)
}).$mount('#app')


----替换后----
let instance = null

function render (props = {}) {
  const { container } = props
  // console.log('container =', container)
  if (props) {
    // console.log('----1', props)
    Vue.prototype.actions = props
    // props.onGlobalStateChange((state, prev) => {
    //   // state: 变更后的状态; prev 变更前的状态
    //   console.log('子应用RMS观察者:', state, prev)
    // })
    // props.setGlobalState({ a: 1 })
  }
  instance = new Vue({
    router,
    store,
    render: h => h(app)
  }).$mount(container ? container.querySelector('#app') : '#app')
}

// webpack打包公共文件路径
// console.log('window.__POWERED_BY_QIANKUN__ = ', window.__POWERED_BY_QIANKUN__)
if (window.__POWERED_BY_QIANKUN__) {
  /*eslint-disable */
  // console.log('window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__ = ', window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__)
  __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__
  /* eslint-enable */
}

if (!window.__POWERED_BY_QIANKUN__) {
  render()
}

/**
 * bootstrap 只会在微应用初始化的时候调用一次，下次微应用重新进入时会直接调用 mount 钩子，不会再重复触发 bootstrap。
 * 通常我们可以在这里做一些全局变量的初始化，比如不会在 unmount 阶段被销毁的应用级别的缓存等。
 */
export async function bootstrap () {
  // console.log('vue2 app bootstraped')
}

/**
 * 应用每次进入都会调用 mount 方法，通常我们在这里触发应用的渲染方法
 */
export async function mount (props) {
  // console.log('qiankun mount', props)
  render(props)
}

/**
 * 应用每次 切出/卸载 会调用的方法，通常在这里我们会卸载微应用的应用实例
 */
export async function unmount (props) {
  instance.$destroy()
  instance.$el.innerHTML = ''
  instance = null
  router = null
}

/**
 * 可选生命周期钩子，仅使用 loadMicroApp 方式加载微应用时生效
 */
export async function update (props) {
  // console.log('update props', props)
}
